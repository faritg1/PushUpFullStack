// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(NikeContext))]
    partial class NikeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUserFk" }, "FkUserCar");

                    b.ToTable("carrito", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Detallecarrito", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdCarritoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdProductoFk" }, "FKProductoDec");

                    b.HasIndex(new[] { "IdCarritoFk" }, "FkCarrito");

                    b.ToTable("detallecarrito", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Detallepedido", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdPedidoFk")
                        .HasColumnType("int");

                    b.Property<int?>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPedidoFk" }, "FkPedido");

                    b.HasIndex(new[] { "IdProductoFk" }, "FkProductoDe");

                    b.ToTable("detallepedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Detalletransaccion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTransaccionFk")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdProductoFk" }, "FKProductoDeTrans");

                    b.HasIndex(new[] { "IdTransaccionFk" }, "FkTransacionDe");

                    b.ToTable("detalletransaccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdDetalleTransaccionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdDetalleTransaccionFk" }, "FkDetaTrans");

                    b.HasIndex(new[] { "IdUserFk" }, "FkUserFac");

                    b.ToTable("factura", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CantidadAnterior")
                        .HasColumnType("int");

                    b.Property<int>("CantidadNueva")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdProductoFk" }, "FkProductoIn");

                    b.ToTable("inventario", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<int?>("IdUserFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUserFk" }, "FkUser");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<int>("Existencia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("StockMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'100'");

                    b.Property<int?>("StockMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaccion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaTransaccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUserFk" }, "FkUserTrans");

                    b.ToTable("transaccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Productocategorium", b =>
                {
                    b.Property<int>("IdProductoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoriaFk")
                        .HasColumnType("int");

                    b.HasKey("IdProductoFk", "IdCategoriaFk")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdCategoriaFk" }, "FkCategoria");

                    b.ToTable("productocategoria", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.HasOne("Domain.Entities.User", "IdUserFkNavigation")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUserFk")
                        .IsRequired()
                        .HasConstraintName("FkUserCar");

                    b.Navigation("IdUserFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Detallecarrito", b =>
                {
                    b.HasOne("Domain.Entities.Carrito", "IdCarritoFkNavigation")
                        .WithMany("Detallecarritos")
                        .HasForeignKey("IdCarritoFk")
                        .IsRequired()
                        .HasConstraintName("FkCarrito");

                    b.HasOne("Domain.Entities.Producto", "IdProductoFkNavigation")
                        .WithMany("Detallecarritos")
                        .HasForeignKey("IdProductoFk")
                        .IsRequired()
                        .HasConstraintName("FKProductoDec");

                    b.Navigation("IdCarritoFkNavigation");

                    b.Navigation("IdProductoFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Detallepedido", b =>
                {
                    b.HasOne("Domain.Entities.Pedido", "IdPedidoFkNavigation")
                        .WithMany("Detallepedidos")
                        .HasForeignKey("IdPedidoFk")
                        .IsRequired()
                        .HasConstraintName("FkPedido");

                    b.HasOne("Domain.Entities.Producto", "IdProductoFkNavigation")
                        .WithMany("Detallepedidos")
                        .HasForeignKey("IdProductoFk")
                        .HasConstraintName("FkProductoDe");

                    b.Navigation("IdPedidoFkNavigation");

                    b.Navigation("IdProductoFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Detalletransaccion", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "IdProductoFkNavigation")
                        .WithMany("Detalletransaccions")
                        .HasForeignKey("IdProductoFk")
                        .IsRequired()
                        .HasConstraintName("FKProductoDeTrans");

                    b.HasOne("Domain.Entities.Transaccion", "IdTransaccionFkNavigation")
                        .WithMany("Detalletransaccions")
                        .HasForeignKey("IdTransaccionFk")
                        .IsRequired()
                        .HasConstraintName("FkTransacionDe");

                    b.Navigation("IdProductoFkNavigation");

                    b.Navigation("IdTransaccionFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.HasOne("Domain.Entities.Detalletransaccion", "IdDetalleTransaccionFkNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdDetalleTransaccionFk")
                        .IsRequired()
                        .HasConstraintName("FkDetaTrans");

                    b.HasOne("Domain.Entities.User", "IdUserFkNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdUserFk")
                        .IsRequired()
                        .HasConstraintName("FkUserFac");

                    b.Navigation("IdDetalleTransaccionFkNavigation");

                    b.Navigation("IdUserFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Inventario", b =>
                {
                    b.HasOne("Domain.Entities.Producto", "IdProductoFkNavigation")
                        .WithMany("Inventarios")
                        .HasForeignKey("IdProductoFk")
                        .IsRequired()
                        .HasConstraintName("FkProductoIn");

                    b.Navigation("IdProductoFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.User", "IdUserFkNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUserFk")
                        .HasConstraintName("FkUser");

                    b.Navigation("IdUserFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Transaccion", b =>
                {
                    b.HasOne("Domain.Entities.User", "IdUserFkNavigation")
                        .WithMany("Transaccions")
                        .HasForeignKey("IdUserFk")
                        .IsRequired()
                        .HasConstraintName("FkUserTrans");

                    b.Navigation("IdUserFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Usuario")
                        .WithMany("UsersRols")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Productocategorium", b =>
                {
                    b.HasOne("Domain.Entities.Categoria", null)
                        .WithMany()
                        .HasForeignKey("IdCategoriaFk")
                        .IsRequired()
                        .HasConstraintName("FkCategoria");

                    b.HasOne("Domain.Entities.Producto", null)
                        .WithMany()
                        .HasForeignKey("IdProductoFk")
                        .IsRequired()
                        .HasConstraintName("FkProducto");
                });

            modelBuilder.Entity("Domain.Entities.Carrito", b =>
                {
                    b.Navigation("Detallecarritos");
                });

            modelBuilder.Entity("Domain.Entities.Detalletransaccion", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Navigation("Detallepedidos");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("Detallecarritos");

                    b.Navigation("Detallepedidos");

                    b.Navigation("Detalletransaccions");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Domain.Entities.Transaccion", b =>
                {
                    b.Navigation("Detalletransaccions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Facturas");

                    b.Navigation("Pedidos");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Transaccions");

                    b.Navigation("UsersRols");
                });
#pragma warning restore 612, 618
        }
    }
}
